//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace Conf.Gameplay
{
public sealed partial class ParkourInfo :  Bright.Config.BeanBase 
{
    public ParkourInfo(ByteBuf _buf) 
    {
        BuildStageDis = _buf.ReadFloat();
        RecycleInvalidStageDis = _buf.ReadFloat();
        Gravity = _buf.ReadFloat();
        GroundStickForce = _buf.ReadFloat();
        Drop2LandDuration = _buf.ReadFloat();
        Fall2LandDuration = _buf.ReadFloat();
        SlideDuration = _buf.ReadFloat();
        JumpRiseForce = _buf.ReadFloat();
        AirJumpRiseForce = _buf.ReadFloat();
        FallGroundDis = _buf.ReadFloat();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);GlideDropForce = new System.Collections.Generic.List<float>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { float _e0;  _e0 = _buf.ReadFloat(); GlideDropForce.Add(_e0);}}
        Fall2GlideDuration = _buf.ReadFloat();
        DropSpeed = _buf.ReadFloat();
        RunDegSmooth = _buf.ReadFloat();
        SlideDegSmooth = _buf.ReadFloat();
        GlideDuration = _buf.ReadFloat();
        GlideGroundDis = _buf.ReadFloat();
        GlideMinSpeed = _buf.ReadFloat();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);GlideTurbo = new System.Collections.Generic.List<float>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { float _e0;  _e0 = _buf.ReadFloat(); GlideTurbo.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);GlideTurboDuration = new System.Collections.Generic.List<float>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { float _e0;  _e0 = _buf.ReadFloat(); GlideTurboDuration.Add(_e0);}}
        AccelerateK = _buf.ReadFloat();
        DecelerateK = _buf.ReadFloat();
        DegThreshold = _buf.ReadFloat();
        UpStep = _buf.ReadFloat();
        DownStep = _buf.ReadFloat();
        LiftForceK = _buf.ReadFloat();
        ForceThreshold = _buf.ReadFloat();
        ForceLerpStep = _buf.ReadFloat();
        LiftJudgeK = _buf.ReadFloat();
        DragSpeed = _buf.ReadFloat();
        PostInit();
    }

    public static ParkourInfo DeserializeParkourInfo(ByteBuf _buf)
    {
        return new Conf.Gameplay.ParkourInfo(_buf);
    }

    /// <summary>
    /// Stage 构建的距离
    /// </summary>
    public float BuildStageDis { get; private set; }
    /// <summary>
    /// Stage 超出的有效距离
    /// </summary>
    public float RecycleInvalidStageDis { get; private set; }
    /// <summary>
    /// 重力4.5
    /// </summary>
    public float Gravity { get; private set; }
    /// <summary>
    /// 角色黏附地面的力
    /// </summary>
    public float GroundStickForce { get; private set; }
    /// <summary>
    /// 速降持续多久触发落地缓冲
    /// </summary>
    public float Drop2LandDuration { get; private set; }
    /// <summary>
    /// 自由落体持续多久触发落地缓冲
    /// </summary>
    public float Fall2LandDuration { get; private set; }
    /// <summary>
    /// 滑铲的持续时间
    /// </summary>
    public float SlideDuration { get; private set; }
    /// <summary>
    /// 跳跃，高度的力
    /// </summary>
    public float JumpRiseForce { get; private set; }
    /// <summary>
    /// 二段跳跃，高度的力
    /// </summary>
    public float AirJumpRiseForce { get; private set; }
    /// <summary>
    /// 切换为自由落体状态，需要跟地面超过多少的距离
    /// </summary>
    public float FallGroundDis { get; private set; }
    /// <summary>
    /// 滑翔状态下降的力，档位0|档位1|档位2|档位3
    /// </summary>
    public System.Collections.Generic.List<float> GlideDropForce { get; private set; }
    /// <summary>
    /// 处于自由落体状态持续 n/s，转换为滑翔状态
    /// </summary>
    public float Fall2GlideDuration { get; private set; }
    /// <summary>
    /// 主动下降的速度
    /// </summary>
    public float DropSpeed { get; private set; }
    /// <summary>
    /// 奔跑时旋转插值
    /// </summary>
    public float RunDegSmooth { get; private set; }
    /// <summary>
    /// 滑铲时旋转插值
    /// </summary>
    public float SlideDegSmooth { get; private set; }
    /// <summary>
    /// 滑翔状态每个档位持续n/s，升档
    /// </summary>
    public float GlideDuration { get; private set; }
    /// <summary>
    /// 切换为滑翔状态，需要跟地面超过多少的距离
    /// </summary>
    public float GlideGroundDis { get; private set; }
    /// <summary>
    /// 切换为滑翔状态，需要速度超过多少
    /// </summary>
    public float GlideMinSpeed { get; private set; }
    /// <summary>
    /// 滑翔状态，升档时速率
    /// </summary>
    public System.Collections.Generic.List<float> GlideTurbo { get; private set; }
    /// <summary>
    /// 升档加速持续时间（小于档位持续时间GlideDuration）
    /// </summary>
    public System.Collections.Generic.List<float> GlideTurboDuration { get; private set; }
    /// <summary>
    /// 下坡加速度比例系数
    /// </summary>
    public float AccelerateK { get; private set; }
    /// <summary>
    /// 上坡减速度比例系数
    /// </summary>
    public float DecelerateK { get; private set; }
    /// <summary>
    /// 角度归零的阈值，小于此值时取0（斜坡）
    /// </summary>
    public float DegThreshold { get; private set; }
    /// <summary>
    /// 减速角度每帧渐变步长百分比（0~1）
    /// </summary>
    public float UpStep { get; private set; }
    /// <summary>
    /// 加速角度每帧渐变步长百分比（0~1）
    /// </summary>
    public float DownStep { get; private set; }
    /// <summary>
    /// 飞坡力比例系数（角度向量*当前速度*比例系数），瞬间改为0重力，离地后复原为4.5
    /// </summary>
    public float LiftForceK { get; private set; }
    /// <summary>
    /// 力归零的阈值，小于此角度值时取0（飞坡）
    /// </summary>
    public float ForceThreshold { get; private set; }
    /// <summary>
    /// 上一帧力到目标力的步长（飞坡）
    /// </summary>
    public float ForceLerpStep { get; private set; }
    /// <summary>
    /// 坡角系数K(飞坡)
    /// </summary>
    public float LiftJudgeK { get; private set; }
    /// <summary>
    /// 滑翔3档玩家触摸灵敏度
    /// </summary>
    public float DragSpeed { get; private set; }

    public const int __ID__ = -570112110;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "BuildStageDis:" + BuildStageDis + ","
        + "RecycleInvalidStageDis:" + RecycleInvalidStageDis + ","
        + "Gravity:" + Gravity + ","
        + "GroundStickForce:" + GroundStickForce + ","
        + "Drop2LandDuration:" + Drop2LandDuration + ","
        + "Fall2LandDuration:" + Fall2LandDuration + ","
        + "SlideDuration:" + SlideDuration + ","
        + "JumpRiseForce:" + JumpRiseForce + ","
        + "AirJumpRiseForce:" + AirJumpRiseForce + ","
        + "FallGroundDis:" + FallGroundDis + ","
        + "GlideDropForce:" + Bright.Common.StringUtil.CollectionToString(GlideDropForce) + ","
        + "Fall2GlideDuration:" + Fall2GlideDuration + ","
        + "DropSpeed:" + DropSpeed + ","
        + "RunDegSmooth:" + RunDegSmooth + ","
        + "SlideDegSmooth:" + SlideDegSmooth + ","
        + "GlideDuration:" + GlideDuration + ","
        + "GlideGroundDis:" + GlideGroundDis + ","
        + "GlideMinSpeed:" + GlideMinSpeed + ","
        + "GlideTurbo:" + Bright.Common.StringUtil.CollectionToString(GlideTurbo) + ","
        + "GlideTurboDuration:" + Bright.Common.StringUtil.CollectionToString(GlideTurboDuration) + ","
        + "AccelerateK:" + AccelerateK + ","
        + "DecelerateK:" + DecelerateK + ","
        + "DegThreshold:" + DegThreshold + ","
        + "UpStep:" + UpStep + ","
        + "DownStep:" + DownStep + ","
        + "LiftForceK:" + LiftForceK + ","
        + "ForceThreshold:" + ForceThreshold + ","
        + "ForceLerpStep:" + ForceLerpStep + ","
        + "LiftJudgeK:" + LiftJudgeK + ","
        + "DragSpeed:" + DragSpeed + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}