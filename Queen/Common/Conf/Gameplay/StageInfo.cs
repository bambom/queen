//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;


namespace Conf.Gameplay
{
public sealed partial class StageInfo :  Bright.Config.BeanBase 
{
    public StageInfo(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Type = _buf.ReadInt();
        Exp = _buf.ReadInt();
        ESpawnRuleId = _buf.ReadInt();
        Time = _buf.ReadInt();
        LandscapeName = _buf.ReadString();
        Loop = _buf.ReadBool();
        Random = _buf.ReadBool();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Stages = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); Stages.Add(_e0);}}
        PostInit();
    }

    public static StageInfo DeserializeStageInfo(ByteBuf _buf)
    {
        return new Conf.Gameplay.StageInfo(_buf);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 关卡类型
    /// </summary>
    public int Type { get; private set; }
    /// <summary>
    /// 基础经验
    /// </summary>
    public int Exp { get; private set; }
    /// <summary>
    /// 刷怪策略ID
    /// </summary>
    public int ESpawnRuleId { get; private set; }
    /// <summary>
    /// 关卡时间
    /// </summary>
    public int Time { get; private set; }
    /// <summary>
    /// 风景/背景板
    /// </summary>
    public string LandscapeName { get; private set; }
    /// <summary>
    /// 循环
    /// </summary>
    public bool Loop { get; private set; }
    /// <summary>
    /// 随机
    /// </summary>
    public bool Random { get; private set; }
    /// <summary>
    /// 指向关卡集合(如果 RANDOM 为 TRUE，将会是指向 StageGroup)
    /// </summary>
    public System.Collections.Generic.List<int> Stages { get; private set; }

    public const int __ID__ = -2145635858;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Type:" + Type + ","
        + "Exp:" + Exp + ","
        + "ESpawnRuleId:" + ESpawnRuleId + ","
        + "Time:" + Time + ","
        + "LandscapeName:" + LandscapeName + ","
        + "Loop:" + Loop + ","
        + "Random:" + Random + ","
        + "Stages:" + Bright.Common.StringUtil.CollectionToString(Stages) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}